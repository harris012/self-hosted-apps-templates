version: '3.6'

services:

    nextcloud:
      image: nextcloud
      container_name: nextcloud
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.nextcloud.entrypoints=http"
        - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.local.harissaeed.com`)"
        - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
        - "traefik.http.routers.nextcloud.middlewares=https-redirect"
        - "traefik.http.routers.nextcloud-secure.entrypoints=https"
        - "traefik.http.routers.nextcloud-secure.rule=Host(`nextcloud.local.harissaeed.com`)"
        - "traefik.http.middlewares.nc-rep.redirectregex.regex=https://(.*)/.well-known/(card|cal)dav"
        - "traefik.http.middlewares.nc-rep.redirectregex.replacement=https://$$1/remote.php/dav/"
        - "traefik.http.middlewares.nc-rep.redirectregex.permanent=true"
        - "traefik.http.middlewares.nc-header.headers.referrerPolicy=no-referrer"
        - "traefik.http.middlewares.nc-header.headers.stsSeconds=31536000"
        - "traefik.http.middlewares.nc-header.headers.forceSTSHeader=true"
        - "traefik.http.middlewares.nc-header.headers.stsPreload=true"
        - "traefik.http.middlewares.nc-header.headers.stsIncludeSubdomains=true"
        - "traefik.http.middlewares.nc-header.headers.browserXssFilter=true"
        - "traefik.http.middlewares.nc-header.headers.customRequestHeaders.X-Forwarded-Proto=https"
        - "traefik.http.routers.nextcloud-secure.middlewares=nc-rep,nc-header"
        - "traefik.http.routers.nextcloud-secure.tls=true"
        - "traefik.http.routers.nextcloud-secure.tls.certresolver=cloudflare"
        - "traefik.http.routers.nextcloud-secure.service=nextcloud"
        - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
        - "traefik.docker.network=proxy"
      volumes:
        - ./volumes/nextcloud/html:/var/www/html
      restart: unless-stopped
      depends_on: 
        - nextcloud_db
      links:
        - nextcloud_db
      networks:
        - proxy
        - default
      environment:
        - MYSQL_HOST=nextcloud_db
        - MYSQL_PASSWORD=Your_PASSWORD
        - MYSQL_DATABASE=user
        - MYSQL_USER=user
        - TRUSTED_PROXIES=172.18.0.0/16
        - OVERWRITEPROTOCOL=https
        # - OVERWRITEHOST=hhhh.com
      logging:
        options:
          max-size: "5m"
          max-file: "3"
      
    nextcloud_db:
      image: yobasystems/alpine-mariadb:10.5.11
      container_name: nextcloud_db
      volumes:
        - ./volumes/nextcloud/db:/var/lib/mysql
      environment:
        - MYSQL_ROOT_PASSWORD=YOUR_Password
        - MYSQL_DATABASE=user
        - MYSQL_USER=user
        - MYSQL_PASSWORD=YOUR_Password
      restart: unless-stopped
      networks:
        - proxy
      logging:
        options:
          max-size: "5m"
          max-file: "3"       
              
    

    portainer:
      container_name: portainer
      image: portainer/portainer-ce:latest
      restart: unless-stopped
      networks:
        - proxy
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./volumes/portainer/data:/data
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.entrypoints=http"
        - "traefik.http.routers.portainer.rule=Host(`portainer.example.com`)"
        - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https"
        - "traefik.http.routers.portainer.middlewares=portainer-https-redirect"
        - "traefik.http.routers.portainer-secure.entrypoints=https"
        - "traefik.http.routers.portainer-secure.rule=Host(`portainer.example.com`)"
        - "traefik.http.routers.portainer-secure.tls=true"
        - "traefik.http.routers.portainer-secure.service=portainer"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        - "traefik.docker.network=proxy"
    bitwarden:
      image: vaultwarden/server:latest
      container_name: bitwarden
      restart: unless-stopped
      security_opt:
        - no-new-privileges:true
      networks:
        - proxy
      environment:
        # After you setted up your user(s)
        - "SIGNUPS_ALLOWED=false"
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy
        # Redirect to get the certs
        - traefik.http.middlewares.redirect-https.redirectScheme.scheme=https
        - traefik.http.middlewares.redirect-https.redirectScheme.permanent=true
        # routers & services
        - traefik.http.routers.bitwarden-ui-https.rule=Host(`bitwarden.example.com`)
        - traefik.http.routers.bitwarden-ui-https.entrypoints=https
        - traefik.http.routers.bitwarden-ui-https.tls=true
        - traefik.http.routers.bitwarden-ui-https.service=bitwarden-ui
        - traefik.http.routers.bitwarden-ui-http.rule=Host(`bitwarden.example.com`)
        - traefik.http.routers.bitwarden-ui-http.entrypoints=http
        - traefik.http.routers.bitwarden-ui-http.middlewares=redirect-https
        - traefik.http.routers.bitwarden-ui-http.service=bitwarden-ui
        - traefik.http.services.bitwarden-ui.loadbalancer.server.port=80
        - traefik.http.routers.bitwarden-websocket-https.rule=Host(`bitwarden.example.com`) && Path(`/notifications/hub`)
        - traefik.http.routers.bitwarden-websocket-https.entrypoints=https
        - traefik.http.routers.bitwarden-websocket-https.tls=true
        - traefik.http.routers.bitwarden-websocket-https.service=bitwarden-websocket
        - traefik.http.routers.bitwarden-websocket-http.rule=Host(`bitwarden.example.com`) && Path(`/notifications/hub`)
        - traefik.http.routers.bitwarden-websocket-http.entrypoints=http
        - traefik.http.routers.bitwarden-websocket-http.middlewares=redirect-https
        - traefik.http.routers.bitwarden-websocket-http.service=bitwarden-websocket
        - traefik.http.services.bitwarden-websocket.loadbalancer.server.port=3012

      volumes:
        - ./volumes/bitwarden/data:/data
    vscode:
      image: ghcr.io/linuxserver/code-server
      container_name: vscode
      ports:
        - "2222:8443"
      restart: unless-stopped
      environment:
        - PUID=1000
        - PGID=1000
        - TZ=Europe/Berlin
      volumes:
        - ./volumes/vscode/config:/config
        - /home/pi/ei23-docker:/ei23-docker     
    pihole:
      container_name: pihole
      image: cbcrowe/pihole-unbound:latest
      hostname: ${HOSTNAME}
      domainname: ${DOMAIN_NAME}
      ports:
        - "8008:80/tcp"
        - 53:53/tcp
        - 53:53/udp
        - 8088:80/tcp
        - 5335:5335/tcp # Uncomment to enable unbound access on local server
        # - 22/tcp # Uncomment to enable SSH
        # - "443:443/tcp"
      environment:
        ServerIP: ${ServerIP}
        TZ: ${TZ}
        WEBPASSWORD: ${WEBPASSWORD}
        REV_SERVER: ${REV_SERVER}
        REV_SERVER_TARGET: ${REV_SERVER_TARGET}
        REV_SERVER_DOMAIN: ${REV_SERVER_DOMAIN}
        REV_SERVER_CIDR: ${REV_SERVER_CIDR}
        DNS1: 127.0.0.1#5335 # Hardcoded to our Unbound server
        DNS2: 127.0.0.1#5335 # Hardcoded to our Unbound server
        DNSSEC: "true" # Enable DNSSEC
      volumes:
        - ./volumes/pihole-unbound:/etc/pihole:rw
        - ./volumes/pihole_dnsmasq-unbound:/etc/dnsmasq.d:rw
      restart: unless-stopped


    node-red:
      container_name: node-red
      image: nodered/node-red:latest
      user: "0"
      environment:
        - TZ= ${TZ}
      ports:
        - "1880:1880"
      restart: unless-stopped
      volumes:
        - ./volumes/node-red-data:/data
      logging:
        options:
          max-size: "5m"
          max-file: "3"

    grafana:
      container_name: grafana
      image: grafana/grafana:latest
      restart: unless-stopped
      user: "0"
      ports:
        - "3000:3000"
      volumes:
        - ./volumes/grafana/data:/var/lib/grafana
        - ./volumes/grafana/log:/var/log/grafana
        - ./volumes/grafana/provisioning:/etc/grafana/provisioning
      # labels:
      #   - traefik.enable=true
      #   - traefik.http.routers.grafana.rule=Host(`example.com`)
      #   - traefik.http.services.grafana.loadbalancer.server.port=3000
      #   - traefik.http.routers.grafana.entrypoints=web-secured
      #   - traefik.http.routers.grafana.tls=true
      #   - traefik.http.routers.grafana.tls.certresolver=letsEncrypt
      environment:
        - GF_PATHS_DATA=/var/lib/grafana
        - GF_PATHS_LOGS=/var/log/grafana
      # Uncomment this if open access is wanted
        # - GF_AUTH_ANONYMOUS_ENABLED=true
        # - GF_AUTH_ANONYMOUS_ORG_NAME=org
        # - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
        # - GF_SECURITY_ALLOW_EMBEDDING=true
      depends_on:
        - influxdb
      logging:
        options:
          max-size: "5m"
          max-file: "3"    
    
    influxdb:
      container_name: influxdb
      image: influxdb:1.8.10
      restart: unless-stopped
      ports:
      - "8086:8086"
      - "8083:8083"
      - "2003:2003"
      environment:
      - "INFLUXDB_DB=MAIN"
      # - "INFLUXDB_DATA_ENGINE=tsm1"
      - "INFLUXDB_REPORTING_DISABLED=false"
      - "INFLUXDB_STORE_ENABLED=false"
      - "INFLUXDB_QUERY_LOG_ENABLED=false"
      - "INFLUXDB_ADMIN_ENABLED=true"
        # -  "INFLUXDB_HTTP_AUTH_ENABLED=true"
        # -  "INFLUXDB_ADMIN_USER=admin"
        # -  "INFLUXDB_ADMIN_PASSWORD=password_placeholder"
      - "INFLUXDB_USER=admin"
      - "INFLUXDB_USER_PASSWORD=raspberry"
        # -  "INFLUXDB_READ_USER=readuser"
        # -  "INFLUXDB_READ_USER_PASSWORD=password_placeholder"
        # -  "INFLUXDB_WRITE_USER=writeuser"
        # -  "INFLUXDB_WRITE_USER_PASSWORD=password_placeholder"
      # # Enable Traefik Log
      # - "INFLUXDB_UDP_ENABLED=true"
      # - "INFLUXDB_UDP_BIND_ADDRESS=0.0.0.0:8089"
      # - "INFLUXDB_UDP_DATABASE=traefik"
      volumes:
      - ./volumes/influxdb/data:/var/lib/influxdb
      - ./backups/influxdb/db:/var/lib/influxdb/backup
      logging:
        options:
          max-size: "5m"
          max-file: "3"

    tailscale:
        privileged: true
        hostname: <ANY_NAME>                                          # This will become the tailscale device name
        network_mode: "host"
        container_name: tailscale
        image: tailscale/tailscale:latest
        volumes:
            - "/var/lib:/var/lib"        # State data will be stored in this directory
            - "/dev/net/tun:/dev/net/tun"                      # Required for tailscale to work
        cap_add:                                               # Required for tailscale to work
          - net_admin
          - sys_module
        command: tailscaled
        restart: unless-stopped
        logging:
          options:
            max-size: "5m"
            max-file: "3"

    gluetun:
      image: qmcgaw/gluetun:latest
      container_name: gluetun
      restart: unless-stopped
      cap_add:
        - NET_ADMIN
      devices:
        - /dev/net/tun:/dev/net/tun
      ports:
        - 8000:5000
      volumes:
        - ./volumes/gluten:/gluetun
      environment:
        - VPN_SERVICE_PROVIDER=<your_vpn_provider> # edit me
        - OPENVPN_USER=<Your_user>                # edit me
        - OPENVPN_PASSWORD=<yout_password>       # edit me
        - SERVER_COUNTRIES=<moon>               # edit me
        - FREE_ONLY=<why_not?>                 # edit me
      logging:
        options:
          max-size: "5m"
          max-file: "3"

    whoogle:
      image: benbusby/whoogle-search:latest
      container_name: whoogle
      restart: unless-stopped
      network_mode: "service:gluetun"
      depends_on:
        - gluetun
      user: whoogle
      security_opt:
        - no-new-privileges
      cap_drop:
        - ALL
      tmpfs:
        - /config/:size=10M,uid=927,gid=927,mode=1700
        - /var/lib/tor/:size=15M,uid=927,gid=927,mode=1700
        - /run/tor/:size=1M,uid=927,gid=927,mode=1700
      env_file:
        - whoogle.env
      logging:
        options:
          max-size: "5m"
          max-file: "3"

    traefik:
      image: traefik:latest
      container_name: traefik
      restart: unless-stopped
      security_opt:
        - no-new-privileges:true
      networks:
        - proxy
      ports:
        - 80:80
        - 443:443
      environment:
        - CF_API_EMAIL=your_email
        - CF_DNS_API_TOKEN=Your_token
        # - CF_API_KEY=
        # be sure to use the correct one depending on if you are using a token or key
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - /home/pi/ei23-docker/traefik/data/traefik.yml:/traefik.yml:ro
        - /home/pi/ei23-docker/traefik/data/acme.json:/acme.json
        - /home/pi/ei23-docker/traefik/data/config.yml:/config.yml:ro
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.entrypoints=http"
        - "traefik.http.routers.traefik.rule=Host(`traefik-dashboard.example.com`)"
        - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:Passphrase"
        - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
        - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
        - "traefik.http.routers.traefik-secure.entrypoints=https"
        - "traefik.http.routers.traefik-secure.rule=Host(`traefik-dashboard.example.com`)"
        - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
        - "traefik.http.routers.traefik-secure.tls=true"
        - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
        - "traefik.http.routers.traefik-secure.tls.domains[0].main=example.com"
        - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.example.com"
        - "traefik.http.routers.traefik-secure.service=api@internal"

networks:
  proxy:
    external: true

